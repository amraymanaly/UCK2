#!/bin/bash

###################################################################################
# UCK2 - Ubuntu Customization Kit
# Copyright (C) 2014 Amr Ayman

# UCK2 is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation ..

# That said, UCK2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with UCK2.  If not, see <http://www.gnu.org/licenses/>.

# Explanation:
#
#	squashfs -- the compressed file that is run as your filesystem on live boot
#		(thus, its software will be installed on installation)

#	squashfs is readonly -- that's why we need to unpack it, then repack it

#	the ubuntu iso might be readonly -- so the mount dir contents might be readonly
#		that's why we mount the iso, copy its contents and then unmount it again ..
#		a.k.a the iso remains technically untouched ..
#

cd "${0%/*}"
clear

function report
{ # reports events
	echo "$@"
	echo "$@" >> "$LOG_FILE"
}

function failure
{ # indicates failure
	report "$1"
	report "=============================================================================="
	exit ${2:-$EXIT_INTERNAL}
}

function check_dependencies
{ # checks for needed programs
	# checking dependencies for availabilty
	local IFS=':' deps="${1:-$DEPENDENCIES}"
	for program in $deps;do
		if [[ -z "$(which $program)" ]];then
			if [[ -z "$2" ]];then
				failure "$program: Dependency not installed or unavailable .." $EXIT_DEPENDENCY
			else
				return 1
			fi
		fi
	done
}

### defining some constans ###

declare LOG_FILE="$HOME/Desktop/uck2-remaster.log"
chown "$USER":"$USER" "$LOG_FILE"
declare -r EXIT_ERROR=1 EXIT_ARGS=2 EXIT_FILE=3 EXIT_LANG=4 EXIT_DEPENDENCY=5 EXIT_INTERNAL=6
declare -r DEPENDENCIES="isoinfo:uname:chroot:sort:cut:grep:egrep:lsb_release:apt-cache:sort:ls:file:zenity:mount:umount:mktemp:md5sum:mkisofs:genisoimage:apt-get:notify-send"
check_dependencies
declare -r BITS="$([[ $(uname -p) == 'x86_64' ]] && report '64' || report '32')"
declare -r VERSION=1.0 SYSTEM_DESC="$(lsb_release -is) $(lsb_release -rs), $(uname -rm)"
declare -r NUM_ARGS=8

### defining some functions ###

function define_langs
{ # defines languages-related constants
	LANGS_COMMAND="apt-cache pkgnames language-pack | grep -ve 'kde' -e 'gnome' -e 'base' | cut -b 15- | sort -u"

	if [[ -z "$(bash -c "$LANGS_COMMAND")" ]];then
		LANGS_COMMAND="apt-cache pkgnames language-support | egrep '^language-support-.{2,7}$' | cut -b 18- | sort -u"
		if [[ -z "$(bash -c "$LANGS_COMMAND")" ]];then
			unset LANGS_COMMAND
			return $EXIT_ERROR
		fi
	fi
	declare -r LANGS_COMMAND
}

function usage
{ # help menu
	cat <<__EOF__
	Usage:
		Normal: $0 v$VERSION
			arg1: iso-file.iso
			arg2: langs_to_install
			arg3: langs_available_at_boot
			arg4: default_lang_at_boot
			arg5: chroot to iso to customize
			arg6: remove windows files
			arg7: iso description
			arg8: make iso hybrid
		For Help: $0 --help
		Using GUI: $0 --gui
	Note that:
		arg1: the ubuntu iso release for customizing, and a new iso will be created
		arg2: the language packs installed (by default) in the system
		arg3: the languages you can switch to at boot
		arg4: the default language when booting
			(not required if languages_available_at_boot is only one)
		arg5: either true or false, [en/dis]ables chrooting to the iso image before finalizing ..
			(to install software, perform tweaks, etc.)
		arg6: either true or false, [en/dis]ables removing windows files that would normally appear under windows from a usb (ex. wubi.exe, autostart.inf, etc.)
		arg7: name of iso and its description
		arg8: either true or false, [en/dis]ables marking iso hybrid [reommended:true] hybrid allows iso to be booted in a usb. if not hybrid, only CDs will be able to boot using iso ..

	for arg2 and arg3, languages are seperated by colons.

	For example:
		$0 /home/$USER/ubuntu-$(lsb_release -rs)-desktop-$([[ $BITS == '64' ]]&&report 'amd64' ||report 'i386').iso 'en:es:ar' 'ja:de:en' 'en'
	You can view available languages by running the command: $LANGS_COMMAND
__EOF__
}

function parse_input
{ # verifies command-line arguments
	report "Verifing Arguments .."
	# check for special parameters
	if [[ "$#" -eq 1 ]];then
		if [[ "$1" == '--help' ]];then
			usage
			exit 0
		elif [[ "$1" == '--gui' ]];then
			run_gui
			return
		fi
	fi
	# number of args is correct
	if [[ "$#" -ne $NUM_ARGS ]];then
		usage
		exit $EXIT_ARGS
	fi
	# iso file is valid
	if [[ "$(ls -l "$1" | cut -b -2)" != '-r' ]];then
		if [[ -L "$1" ]];then
			failure "$([[ -n "$1" ]] && report "$1" || report "arg1"): File is a symbolic link .." $EXIT_FILE
		else
			failure "$([[ -n "$1" ]] && report "$1" || report "arg1"): File can't be accessed .." $EXIT_FILE
		fi
	elif [[ ! -s "$1" ]];then
		failure "$([[ -n "$1" ]] && report "$1" || report "arg1"): File is empty .." $EXIT_FILE
	elif ! file "$1" | egrep 'boot sector$' -q;then
		failure "$([[ -n "$1" ]] && report "$1" || report "arg1"): File not an ISO .." $EXIT_FILE
	elif ! isoinfo -p -i "$1" | grep -iqe 'casper' -e 'isolinux';then
		failure "$([[ -n "$1" ]] && report "$1" || report "arg1"): File is not a valid .." $EXIT_FILE
	fi
	# language validation
	local found1=false found2=false
	for lang in $(bash -c "$LANGS_COMMAND"); do
		if [[ "$lang" == "$2" ]];then
			found1=true
		fi
		if [[ "$lang" == "$3" ]];then
			found2=true
		fi
	done
	if ! $found1;then
		failure "$([[ -n "$2" ]] && report "$2" || report "arg2"): Language unavailable, run $LANGS_COMMAND to list all languages .." $EXIT_LANG
	elif ! $found2;then
		failure "$([[ -n "$3" ]] && report "$3" || report "arg3"): Language unavailable, run $LANGS_COMMAND to list all languages .." $EXIT_LANG
	fi
	local IFS=':' found3=false
	for lang in $2;do
		if [[ "$4" == "$lang" ]];then
			found3=true
			break
		fi
	done
	if ! $found3;then
		failure "$([[ -n "$4" ]] && report "$4" || report "arg4"): Language unavailable, run $LANGS_COMMAND to list all languages .." $EXIT_LANG
	fi
	# wants to cusomize ?
	if [[ "$5" != 'true' ]] && [[ "$5" != 'false' ]];then
		failure "$([[ -n "$5" ]] && report "$5" || report "arg5"): Only \"true\" or \"false\" are accepted .." $EXIT_ARGS
	fi
	# wants to remove win32 bindings ?
	if [[ "$6" != 'true' ]] && [[ "$5" != 'false' ]];then
		failure "$([[ -n "$6" ]] && report "$6" || report "arg6"): Only \"true\" or \"false\" are accepted .." $EXIT_ARGS
	fi
	# iso description valid
	if report "$7" | egrep '^ *$';then
		failure "arg7: Not provided .." $EXIT_ARGS
	elif [[ "${#7}" -gt 35 ]];then
		failure "$7: Length must not exceed 35 characters .." $EXIT_ARGS
	fi
	# wants to mark iso hybrid ?
	if [[ "$8" != 'true' ]] && [[ "$5" != 'false' ]];then
		failure "$([[ -n "$6" ]] && report "$6" || report "arg6"): Only \"true\" or \"false\" are accepted .." $EXIT_ARGS
	fi
	report "Arguments Verified .. !"
}

function run_gui
{ # runs a graphical interface
	failure "This feature is still under maintainance, please be patient .."
}

function ismounted
{ # checks if a directory is mounted
	echo -e "$(cat /proc/mounts | awk '{print $2}')" | grep -q "^$1$"
}

source uck2-remaster-iso || failure "Script (uck2-remaster-iso) couldn't be found in $(dirname "$0") .."
source uck2-remaster-rootfs || failure "Script (uck2-remaster-rootfs) couldn't be found in $(dirname "$0") .."

source uck2-remaster-customize || failure "Script (uck2-remaster-customize) couldn't be found in $(dirname "$0") .."

function main
{ # the main execution
	# require root previleges
	if [[ "$EUID" -ne 0 ]];then
		report 'Run this script as root'
		exit $EXIT_ERROR
	fi
	### setting variables ###

	## Directories ##

	# hq
	# FIXME: remove if
	local r="${@:((NUM_ARGS+1)):1}"
	declare -r REMASTER_HOME="${r:-$(mktemp -d)}"
	# place to mount iso, used only when copying its contents to $ISO_MOUNT_DIR to work with
	declare -r ISO_MOUNT_DIR="$REMASTER_HOME/remaster-iso-mount"
	# same as $ISO_MOUNT_DIR, but guaranteed not to be write-protected
	declare -r REMASTER_DIR="$REMASTER_HOME/remaster-iso"
	# place to mount squashfs/rootfs --> this is the squash filesystem to be tweaked
	declare -r SQUASHFS_MOUNT_DIR="$REMASTER_HOME/remaster-root-mount"
	# same as $SQUASHFS_MOUNT_DIR, but guaranteed not to be write-protected
	declare -r SQUASHFS_REMASTER_DIR="$REMASTER_HOME/remaster-virtual-filesystem"
	# place to store apt cache installations when chrooting
	declare -r REMASTER_APT_CACHE="$REMASTER_HOME/remaster-apt-cache"
	# place to link with $SQUASHFS_MOUNT_DIR/root
	#	--> mount --bind $SQUASHFS_MOUNT_DIR/root $REMASTER_ROOT_HOME
	declare -r REMASTER_ROOT_HOME="$REMASTER_HOME/remaster-root-home"
	# place to place the new iso
	declare -r NEW_FILES_DIR="$REMASTER_HOME/remaster-new-iso-home"

	## Choices ##

	# list of languages to install on system --> array of strings
	declare -r A_LANGS_INSTALL=$2
	# list of languages avaiable at boot --> array of strings
	declare -r A_LANGS_BOOT=$3
	# wants to customize by chrooting --> bool
	declare -r B_CUSTOMIZE=$5
	# wants to remove win32 files --> bool
	declare -r B_REMOVE_WIN32=$6
	# wants to mark iso hybrid --> bool
	declare -r B_HYBRID=$8	
	# default language at boot --> string
	declare -r DEFAULT_LANG_AT_BOOT=$4
	# iso description --> string
	declare -r ISO_DESCRIPTION="$7"

	## System Images ##

	# SquashFS #

	# squashfs/rootfs image --> iso file
	declare -r MAIN_SQUASHFS_IMAGE="$REMASTER_DIR/casper/filesystem.squashfs"
	# squashfs-to-be-created --> squashfs file
	declare -r NEW_SQUASHFS_IMAGE="$NEW_FILES_DIR/filesystem.squashfs"

	# Ubuntu ISO #

	# the ubuntu iso image --> iso file
	declare -r MAIN_ISO="$1"
	# iso-to-be-created's name --> string
	declare -r NEW_ISO_FILE_NAME="$ISO_DESCRIPTION-final.iso"
	# iso-to-be-created --> iso file
	declare -r NEW_ISO="$NEW_FILES_DIR/$NEW_ISO_FILE_NAME"


	## starting work ##

	report ">> UCK2 v$VERSION on $SYSTEM_DESC"
	report "Starting ISO Remastering on $(date +"(%H:%M:%S) %A, %D")"

	## unpacking ##

	if [[ -z "$r" ]];then
		# unpacking iso
		iso mount unpack unmount
		if $B_CUSTOMIZE || $B_REMOVE_WIN32;then
			# unpacking rootfs
			rootfs mount unpack unmount
			# removing win32 files
			if $B_REMOVE_WIN32;then
				customize remove_win32
			fi
			if $B_CUSTOMIZE;then
				rootfs prepare chroot clean pack
			fi
		else
			mv "$MAIN_SQUASHFS_IMAGE" "$NEW_SQUASHFS_IMAGE" # not changed
		fi
	fi
	iso pack
}

if ! define_langs;then
	failure "No languages could be found, try running: sudo apt-get update" $EXIT_ERROR
fi
# parse_input "$@"
main "$@"
failure '' 0 # to end report and exit
